( function () {
	'use strict';
	if ( 'undefined' != typeof wpcm && 'undefined' != typeof tinyMCE ) {
		var e = tinyMCE,
			t = wpcm.defaults,
			i = function ( i, n ) {
				window.TmEditor = i;
				var a = function ( e ) {
						return (
							'PRE' == e.nodeName &&
							i.dom.hasClass( e.parentElement, 'code-block' )
						);
					},
					l = function ( t ) {
						var i = [];
						return (
							e.each( t, function ( e, t ) {
								i.push( { text: e, value: t } );
							} ),
							i
						);
					},
					o = l( wpcm.mimes ),
					d = l( wpcm.themes ),
					r = {
						open: function ( e, t ) {
							( e.onsubmit = t ), i.windowManager.open( e );
						},
					},
					c = {
						show: function ( e, t ) {
							c.hide();
							var n = i.dom.create( 'div', {
									class: 'wpcm-toolbar',
									id: 'wpcm-toolbar',
									'data-mce-bogus': '1',
									contenteditable: ! 1,
								} ),
								a = i.dom.create( 'div', {
									class: 'wpcm-toolbar-container',
									'data-mce-bogus': '1',
								} ),
								l = g( e, ! 1 ),
								o = i.dom.create( 'span', {
									class: 'info language',
									'data-mce-bogus': '1',
									contenteditable: ! 1,
									title: 'Language: ' + wpcm.mimes[ l.mime ],
								} );
							a.appendChild( o );
							var d = i.dom.create( 'span', {
								class: 'info theme',
								'data-mce-bogus': '1',
								contenteditable: ! 1,
								title: 'Theme: ' + wpcm.themes[ l.theme ],
							} );
							if ( ( a.appendChild( d ), l.align ) ) {
								var r = 'full' == l.align ? 'Full' : 'Wide',
									s = i.dom.create( 'span', {
										class: 'info align',
										'data-mce-bogus': '1',
										contenteditable: ! 1,
										title: r + ' Width',
									} );
								a.appendChild( s );
							}
							var m = i.dom.create( 'span', {
								class: 'wpcm-edit-icon',
								'data-mce-bogus': '1',
							} );
							a.appendChild( m ),
								i.dom.bind( m, 'mousedown', function ( e ) {
									e.stopPropagation(), t();
								} ),
								n.appendChild( a ),
								i.getBody().appendChild( n );
							var p = i.dom.getRect( e.parentNode );
							i.dom.setStyles( n, {
								top: p.y,
								left: p.x,
								width: p.w,
							} );
						},
						hide: function () {
							var e = i.dom.get( 'wpcm-toolbar' );
							e && i.dom.remove( e );
						},
					},
					s = function ( e, t ) {
						return {
							title: 'Edit CodeMirror Block',
							minWidth: 700,
							body: [
								{
									type: 'listbox',
									name: 'mime',
									label: 'Language / Mode',
									values: o,
									value: e.mime,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'listbox',
									name: 'theme',
									label: 'Theme',
									values: d,
									value: e.theme,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'checkbox',
									name: 'lineNumbers',
									label: 'Show Line Numbers?',
									checked: e.lineNumbers,
								},
								{
									type: 'checkbox',
									name: 'styleActiveLine',
									label: 'Highlight Active Line?',
									checked: e.styleActiveLine,
								},
								{
									type: 'checkbox',
									name: 'lineWrapping',
									label: 'Warp Long Line?',
									checked: e.lineWrapping,
								},
								{
									type: 'listbox',
									name: 'readOnly',
									label: 'Frontend Options?',
									values: [
										{ text: 'Default', value: ! 0 },
										{ text: 'Editable', value: ! 1 },
										{
											text: 'Disable Copy',
											value: 'nocursor',
										},
									],
									value: e.readOnly,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'listbox',
									name: 'align',
									label: 'Alignment',
									values: [
										{ text: 'Normal', value: '' },
										{ text: 'Wide Width', value: 'wide' },
										{ text: 'Full Width', value: 'full' },
									],
									value: e.align,
									style: 'direction: ltr; text-align: left',
								},
							],
						};
					},
					m = function ( e, i ) {
						return {
							title: 'Add CodeMirror Block',
							layout: 'flex',
							direction: 'column',
							align: 'stretch',
							width: e - 350,
							height: i - 150,
							body: [
								{
									type: 'textbox',
									name: 'code',
									flex: 1,
									multiline: ! 0,
									spellcheck: ! 1,
									style: 'direction: ltr; text-align: left',
									classes: 'monospace',
									autofocus: ! 0,
								},
								{
									type: 'listbox',
									name: 'mime',
									label: 'Language / Mode',
									values: o,
									value: t.mime,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'listbox',
									name: 'theme',
									label: 'Theme',
									values: d,
									value: t.theme,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'checkbox',
									name: 'lineNumbers',
									label: 'Show Line Numbers?',
									checked: t.lineNumbers,
								},
								{
									type: 'checkbox',
									name: 'styleActiveLine',
									label: 'Highlight Active Line?',
									checked: t.styleActiveLine,
								},
								{
									type: 'checkbox',
									name: 'lineWrapping',
									label: 'Warp Long Line?',
									checked: t.lineWrapping,
								},
								{
									type: 'listbox',
									name: 'readOnly',
									label: ' on Frontend?',
									values: [
										{ text: 'Normal', value: ! 0 },
										{ text: 'Editable', value: ! 1 },
										{
											text: 'Disable Copy',
											value: 'nocursor',
										},
									],
									value: t.readOnly,
									style: 'direction: ltr; text-align: left',
								},
								{
									type: 'listbox',
									name: 'align',
									label: 'Alignment',
									values: [
										{ text: 'Normal', value: '' },
										{ text: 'Wide Width', value: 'wide' },
										{ text: 'Full Width', value: 'full' },
									],
									value: '',
									style: 'direction: ltr; text-align: left',
								},
							],
						};
					},
					p = function () {
						var t = i.dom.getViewPort(),
							n = Math.min( t.w, window.innerWidth ) || 700,
							a = Math.min( t.h, window.innerHeight ) || 500;
						r.open( m( n, a ), function ( t ) {
							var n = {},
								a = t.data.code.replace( /\r\n/gim, '\n' );
							( n.mode = wpcm.modes[ t.data.mime ] ),
								( n.mime = t.data.mime ),
								( n.theme = t.data.theme ),
								( n.lineNumbers = t.data.lineNumbers ),
								( n.lineWrapping = t.data.lineWrapping ),
								( n.styleActiveLine = t.data.styleActiveLine ),
								( n.readOnly = t.data.readOnly ),
								( n.align = t.data.align ),
								( n = JSON.stringify( n ) ),
								( a = e.html.Entities.encodeAllRaw( a ) );
							var l = '&nbsp;',
								o =
									'' != t.data.align
										? 'align' + t.data.align
										: '';
							i.insertContent(
								l +
									'<div class="wp-block-codemirror-blocks code-block ' +
									o +
									'"><pre class="CodeMirror" data-setting="' +
									u( n ) +
									'">' +
									a +
									'</pre></div>' +
									l
							);
						} );
					},
					u = function ( e ) {
						var t = e
							.replace( /"/g, '&quot;' )
							.replace( /'/g, '&#039;' );
						return t;
					},
					g = function ( e, i ) {
						if ( ! a( e ) ) return {};
						var n,
							l = e.getAttribute( 'data-setting' );
						return (
							( l = JSON.parse( l ) ),
							( n = l
								? {
										mime:
											void 0 !== l.mime ? l.mime : t.mime,
										theme:
											void 0 !== l.theme
												? l.theme
												: t.theme,
										lineNumbers:
											void 0 !== l.lineNumbers
												? l.lineNumbers
												: t.lineNumbers,
										styleActiveLine:
											void 0 !== l.styleActiveLine
												? l.styleActiveLine
												: t.styleActiveLine,
										lineWrapping:
											void 0 !== l.lineWrapping
												? l.lineWrapping
												: t.lineWrapping,
										readOnly:
											void 0 !== l.readOnly
												? l.readOnly
												: t.readOnly,
										align:
											void 0 !== l.align
												? l.align
												: t.align,
								  }
								: {
										mime: t.mime,
										theme: t.theme,
										lineNumbers: t.lineNumbers,
										styleActiveLine: t.styleActiveLine,
										lineWrapping: t.lineWrapping,
										readOnly: t.readOnly,
										align: t.align,
								  } ),
							n
						);
					},
					b = function ( e, t ) {
						if ( a( e ) ) {
							e.parentNode.classList.remove( 'alignfull' ),
								e.parentNode.classList.remove( 'alignwide' ),
								'' != t.align &&
									e.parentNode.classList.add(
										'align' + t.align
									);
							var n = JSON.stringify( t ),
								l = i.dom.create( 'pre', {
									class: 'CodeMirror',
									'data-setting': n,
								} );
							i.dom.replace( l, e, ! 0 ),
								( e = l ),
								c.show( e, v );
						}
					},
					v = function () {
						var e = i.selection.getNode(),
							t = g( e, ! 1 );
						r.open( s( t, ! 1 ), function ( t ) {
							b( e, {
								mode: wpcm.modes[ t.data.mime ],
								mime: t.data.mime,
								theme: t.data.theme,
								lineNumbers: t.data.lineNumbers,
								lineWrapping: t.data.lineWrapping,
								styleActiveLine: t.data.styleActiveLine,
								readOnly: t.data.readOnly,
								align: t.data.align,
							} );
						} );
					},
					h = ! 1;
				i.on( 'PastePreProcess', function ( e ) {
					h &&
						( e.stopPropagation(),
						( e.content = e.content
							.replace(
								/^\s*<pre(.*?)>([\s\S]+)<\/pre>\s*$/gi,
								'$2'
							)
							.replace( /\n/g, '<BR/>' )
							.replace( / /g, '&nbsp;' )
							.replace( /<span(.*?)>/g, '' )
							.replace( /<\/span>/g, '' ) ) );
				} );
				var y = null,
					f = null;
				i.on( 'focus', function ( e ) {
					f = ! 0;
				} ),
					i.on( 'Submit', function ( e ) {
						e.stopPropagation(), ( f = null ), c.hide();
					} );
				var x = null;
				i.on( 'NodeChange', function ( e ) {
					e.stopPropagation();
					var t = i.selection.getNode();
					t !== x &&
						( ( x = t ),
						y &&
							( a( t )
								? ( ( h = ! 0 ), y.disabled( ! 1 ) )
								: ( ( h = ! 1 ), y.disabled( ! 0 ) ) ),
						f && a( t ) ? c.show( t, v ) : c.hide() );
				} ),
					i.addButton( 'codemirror-block', {
						title: 'CodeMirror Block',
						image: n + '/code-block.png',
						onclick: p,
					} ),
					i.addButton( 'codemirror-block-edit', {
						title: 'CodeMirror Block Settings',
						disabled: ! 0,
						image: n + '/code-block-setting.png',
						onPostRender: function () {
							y = this;
						},
						onclick: v,
					} );
			};
		e.PluginManager.add( 'wpcm_plugin', i );
	}
} )();
